<?php

class CUMerchant
{
    /**
     * Current API endpoint.
     *
     * @var string
     */
    protected $endpoint = 'https://cryptounifier.io/api/v2/';

    /**
     * Merchant Key.
     *
     * @var string
     */
    protected $public;

    /**
     * Secret Key.
     *
     * @var string
     */
    protected $secret;

    /**
     * Construct keys to any request.
     */
    public function __construct(string $public, string $secret)
    {
        $this->public = $public;
        $this->secret = $secret;
    }

    /**
     * Create a merchant invoice.
     *
     * @return object
     */
    public function createInvoice(
        array $currencies,
        float $usd_amount = 0,
        string $name = '',
        string $description = '',
        array $metadata = [],
        string $postback_url = '',
        string $redirect_url = ''
    ) {
        return $this->_sendRequest('create-invoice', [
            'currencies'   => json_encode($currencies),
            'usd_amount'   => $usd_amount,
            'name'         => $name,
            'description'  => $description,
            'metadata'     => json_encode($metadata),
            'postback_url' => $postback_url,
            'redirect_url' => $redirect_url,
        ]);
    }

    /**
     * Calculate invoices values.
     *
     * @return object
     */
    public function calculateInvoice(array $currencies, float $usd_amount = 0)
    {
        return $this->_sendRequest('calculate-invoice', [
            'currencies' => $currencies,
            'usd_amount' => $usd_amount,
        ]);
    }

    /**
     * Process an expired invoice.
     *
     * @return object
     */
    public function processInvoice(string $invoice_id)
    {
        return $this->_sendRequest('process-invoice', ['invoice_id' => $invoice_id]);
    }

    /**
     * Get invoice full information.
     *
     * @return object
     */
    public function invoiceInfo(string $invoice_id)
    {
        return $this->_sendRequest('invoice-info', ['invoice_id' => $invoice_id]);
    }

    /**
     * List invoices generated by merchant key.
     *
     * @return object
     */
    public function listInvoices(int $limit = 0)
    {
        return $this->_sendRequest('list-invoices', ['limit' => ($limit !== 0) ? $limit : null]);
    }

    /**
     * Send request to Crypto Unifier API.
     *
     * @return object
     */
    protected function _sendRequest(string $path, array $body = [])
    {
        $body = array_filter($body);

        $ch = curl_init($this->endpoint . $path);

        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(array_merge($body, ['merchant_key' => $this->public, 'secret_key' => $this->secret])));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        // curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        // curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

        $response = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        curl_close($ch);

        if ($response == null) {
            return (object) ['status' => 503, 'message' => 'Connection failed.'];
        }

        return  json_decode((string) $response);
    }
}
